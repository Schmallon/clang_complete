From 075af5c69279c342b30b1abd76a86017f29cdf1b Mon Sep 17 00:00:00 2001
From: Matthias Kleine <matthias_kleine@gmx.de>
Date: Mon, 5 Mar 2012 22:46:31 +0100
Subject: [PATCH 3/3] Add IsImplicitAccess

---
 include/clang-c/Index.h         |    2 ++
 tools/libclang/CIndex.cpp       |   10 ++++++++++
 tools/libclang/libclang.exports |    1 +
 3 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/include/clang-c/Index.h b/include/clang-c/Index.h
index df48a45..d308786 100644
--- a/include/clang-c/Index.h
+++ b/include/clang-c/Index.h
@@ -2963,6 +2963,8 @@ CINDEX_LINKAGE unsigned clang_CallExpr_getNumArgs(CXCursor C);
 CINDEX_LINKAGE CXCursor clang_CallExpr_getArg(CXCursor C,
                                               unsigned arg_number);
 
+CINDEX_LINKAGE int clang_MemberRefExpr_IsImplicitAccess(CXCursor C);
+
 CINDEX_LINKAGE CXSourceRange clang_getIdentifierRange(CXCursor C);
 
 /**
diff --git a/tools/libclang/CIndex.cpp b/tools/libclang/CIndex.cpp
index 90c74be..e475d3b 100644
--- a/tools/libclang/CIndex.cpp
+++ b/tools/libclang/CIndex.cpp
@@ -4334,6 +4334,16 @@ void clang_getDefinitionSpellingAndExtent(CXCursor C,
   *endColumn = SM.getSpellingColumnNumber(Body->getRBracLoc());
 }
 
+int clang_MemberRefExpr_IsImplicitAccess(CXCursor C)
+{
+  if (C.kind != CXCursor_MemberRefExpr)
+    return 0;
+  MemberExpr *E = dyn_cast<MemberExpr>(getCursorExpr(C));
+  if (!E)
+    return 0;
+
+  return E->isImplicitAccess();
+}
 
 CXSourceRange clang_getCursorReferenceNameRange(CXCursor C, unsigned NameFlags,
                                                 unsigned PieceIndex) {
diff --git a/tools/libclang/libclang.exports b/tools/libclang/libclang.exports
index ba7811e..5bfeb29 100644
--- a/tools/libclang/libclang.exports
+++ b/tools/libclang/libclang.exports
@@ -195,3 +195,4 @@ clang_tokenize
 clang_visitChildren
 clang_visitChildrenWithBlock
 clang_getIdentifierRange
+clang_MemberRefExpr_IsImplicitAccess
-- 
1.7.9

