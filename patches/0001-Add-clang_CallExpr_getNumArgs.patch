From 7efdbd1a15f5f93476295cc67d0a8f07f94a005c Mon Sep 17 00:00:00 2001
From: Matthias Kleine <matthias_kleine@gmx.de>
Date: Mon, 14 Nov 2011 18:15:43 +0100
Subject: [PATCH 1/2] Add clang_CallExpr_getNumArgs

---
 include/clang-c/Index.h         |   11 +++++++++++
 tools/libclang/CIndex.cpp       |   32 ++++++++++++++++++++++++++++++++
 tools/libclang/libclang.exports |    2 ++
 3 files changed, 45 insertions(+), 0 deletions(-)

diff --git a/include/clang-c/Index.h b/include/clang-c/Index.h
index 67a26d9..3972303 100644
--- a/include/clang-c/Index.h
+++ b/include/clang-c/Index.h
@@ -2953,6 +2953,17 @@ CINDEX_LINKAGE unsigned clang_CXXMethod_isStatic(CXCursor C);
 CINDEX_LINKAGE unsigned clang_CXXMethod_isVirtual(CXCursor C);
 
 /**
+ * \brief Determine the number of arguments in a CallExpr.
+ */
+CINDEX_LINKAGE unsigned clang_CallExpr_getNumArgs(CXCursor C);
+
+/**
+ * \brief Retrieve a cursor for an argument passed to call expression C
+ */
+CINDEX_LINKAGE CXCursor clang_CallExpr_getArg(CXCursor C,
+                                              unsigned arg_number);
+
+/**
  * \brief Given a cursor that represents a template, determine
  * the cursor kind of the specializations would be generated by instantiating
  * the template.
diff --git a/tools/libclang/CIndex.cpp b/tools/libclang/CIndex.cpp
index 924a843..622e64f 100644
--- a/tools/libclang/CIndex.cpp
+++ b/tools/libclang/CIndex.cpp
@@ -5429,6 +5429,38 @@ unsigned clang_CXXMethod_isVirtual(CXCursor C) {
 } // end: extern "C"
 
 //===----------------------------------------------------------------------===//
+// CallExpr introspection.
+//===----------------------------------------------------------------------===//
+extern "C" {
+unsigned clang_CallExpr_getNumArgs(CXCursor C) {
+  Expr *E = cxcursor::getCursorExpr(C);
+  CallExpr *CE = dyn_cast<CallExpr>(E);
+  if (CE)
+  {
+    return CE->getNumArgs();
+  }
+  return 0;
+}
+
+
+CXCursor clang_CallExpr_getArg(CXCursor C,
+                               unsigned arg_number) {
+  Expr *E = cxcursor::getCursorExpr(C);
+  CallExpr *CE = dyn_cast<CallExpr>(E);
+
+  if (CE && arg_number < CE->getNumArgs()) {
+    Expr *Arg = CE->getArg(arg_number);
+    Decl *D = getDeclFromExpr(CE);
+    CXTranslationUnit tu = getCursorTU(C);
+    CXCursor ArgCursor = MakeCXCursor(Arg, D, tu);
+    return ArgCursor;
+  } else {
+    return clang_getNullCursor();
+  }
+}
+}
+
+//===----------------------------------------------------------------------===//
 // Attribute introspection.
 //===----------------------------------------------------------------------===//
 
diff --git a/tools/libclang/libclang.exports b/tools/libclang/libclang.exports
index b028bb4..b96eeb8 100644
--- a/tools/libclang/libclang.exports
+++ b/tools/libclang/libclang.exports
@@ -2,6 +2,8 @@ clang_CXCursorSet_contains
 clang_CXCursorSet_insert
 clang_CXXMethod_isStatic
 clang_CXXMethod_isVirtual
+clang_CallExpr_getArg
+clang_CallExpr_getNumArgs
 clang_Cursor_getTranslationUnit
 clang_Cursor_isNull
 clang_IndexAction_create
-- 
1.7.9

